#!/usr/bin/env ruby

$:.unshift File.expand_path(File.dirname(__FILE__) + "/../lib")

require 'rubygems'
require 'bundler/setup'
require "adbot/base.rb"
options = Adbot::parse_options( ARGV )
Dir.chdir options.pwd if options.pwd
logdev = STDOUT
logdev = File.open "/dev/null", "a" if options.no_log
Log::get logdev, { :default => true, :level => Logger::INFO }

begin
  if File.exists? options.output_dir
    Log::warn "file #{options.output_dir} already exists"
  else
    Log::info "file #{options.output_dir} created"
    Adbot::output_tabular_headers options.output_dir
  end

  require 'active_record'
  require 'right_aws'
  require 'yaml'

  require 'adabase/app/models/scan_fail.rb'
  require 'adabase/app/models/domain.rb'
  require 'adabase/app/models/scan.rb'
  require 'adabase/app/models/ad.rb'
  require 'adabase/app/models/screenshot.rb'
  require 'adabase/app/models/ad_image.rb'

  s3 = RightAws::S3.new(File.read('../aws/access-key').strip,
                        File.read('../aws/secret-access-key').strip,
                        { :logger => Log::get } )

  Screenshot.bucket = RightAws::S3::Bucket.new(s3, 'adchart_screenshots')

  ActiveRecord::Base.establish_connection YAML.load_file('../database.yml')[ ENV['RAILS_ENV'] ]

  time = Time.now
  total = Scan.count
  limit = 2500
  first_id = options.start_from ? options.start_from.to_i : 0 
  last_id = first_id - 1
  puts "dumping database to file #{options.output_dir}, total scans #{total}, increments of #{limit}, starting with scan #{first_id}"
  while( scans = Scan.where("scan_completed = :scan_completed AND id > :id", { :id => last_id, :scan_completed => true }).limit(limit).order("id ASC").all).any?
    incremental_time = Time.now
    scans.each do |s| Adbot::output_tabular s, options end
    last_id = scans.last.id
    puts "#{"%3.2f" % ([100.0 * (last_id - first_id) / (total - first_id),100.0].min) }% complete, total time #{"%4.2f" % ((Time.now - time) / 60.0)}m, incremental time #{"%3.2f" % (Time.now - incremental_time)}s"
  end
  puts "done, took #{"%4.2f" % ((Time.now - time) / 60.0)}m"
rescue Exception => e
  Log::fatal "uncaught exception #{e.class}", "adbot"
  Log::fatal e.backtrace.join "\t"
  Log::fatal e.message if e.message.length > 0 
end
